# Git Initialization

git init

# Remove Git Initialization

rm -rf .git

# Remote

git remote -v

git remote add <name> <url>

git remote remove <name>

git remote rename <old_name> <new_name>

git remote set-url <name> <new_url>

git remote show <name>

# Branch

git branch

git branch -M <new_name>

git branch -r

git branch -a

git branch <branch_name>
git checkout <branch_name>

git checkout -b <branch_name>

git switch -c <branch_name>

git branch -d <branch_name>

git branch -D <branch_name>

# Commit

git commit -m "Message for your commit"

(Edit your last commit for local)
git commit --amend -m "Updated message for your commit"

If you want to push that commit to github (If you code already pushed to github) - 
- git push --force (If you’re the only person working on the branch)
- git push --force-with-lease (Do it more safely on team projects)

git add <file_name>
git commit --amend --no-edit

git add <file_name>
git commit --amend -m "Updated message for you commit after adding a new file"

git add -u
git commit -m "Message for your commit"

or

git commit -a -m "Message for your commit"

# Fork

Fork repo → your GitHub

# Clone

git clone <url>

# Log

git log

git log --oneline

# Restore/Remove

git restore <file_name>

git restore --staged <file_name> (Removes the file from staging, keeps the file and its changes in your working directory)

or

git rm --cached <file_name> (Remove a file from Git tracking, but keep it on local)

# Diff

git diff

git diff --staged

git diff <commit_id> <file_name>

git diff <commit_id_1> <commit_id_2>

git branch <branch_1> <branch_2>
